---
# This playbook requires the following variables to be set on the command line (ansible-playbook -e...)
# Normally this is done from scripts/bootstrap.sh
# - provision_repo
# - provision_dir
# - provision_ver
- hosts: all
  tasks:
  # Get info on the repo dir
  - stat:
      path={{ provision_dir }} 
      follow=yes
    register: d
  
  # If provision_directory exists, update but fail gracefully if there are
  # local changes.
  #- name: "Updating provision_repository provision_repo in {{provision_dir}}"
  ## Ansible's git module seems to "update" to the specified branch
  ## in a way that loses local commits if they haven't yet been 
  ## pushed to the branch specified by {{ provision_ver }}. 
  # TODO: Find a safe way to automatically pull down updates
  #  git: 
  #    ssh_opts="-o StrictHostKeyChecking=no"
  #    provision_repo={{ provision_repo }}
  #    dest={{ provision_dir }}
  #    update=yes
  #    force=no
  #    recursive=yes
  #  ignore_errors: yes
  #  when: d.stat.exists == True
    
  # If provision_directory does not exist, clone it
  - name: "Cloning provision_repository provision_repo in {{provision_dir}}"
    git: 
      ssh_opts="-o StrictHostKeyChecking=no"
      provision_repo={{ provision_repo }}
      dest={{ provision_dir }}
      provision_version={{ provision_ver }}
      recursive=yes
    when: d.stat.exists == False
  
  - name: "provision at boot"
    lineinfile:
      dest="/etc/rc.local"
      state="present"
      regexp={{ provision_dir }}
      insertbefore="^exit"
      line="[ -x '{{ provision_dir }}/scripts/bootstrap.sh' ] && {{ provision_dir }}/scripts/bootstrap.sh"

